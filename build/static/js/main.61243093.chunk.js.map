{"version":3,"sources":["redux/reducers/errorsReducer.js","redux/reducers/loginModeReducer.js","redux/reducers/userReducer.js","redux/reducers/restaurantReducer.js","redux/reducers/detailsReducer.js","redux/reducers/groupReducer.js","redux/reducers/profilePageReducer.js","redux/reducers/profileUserInfo.js","redux/reducers/adminReducer.js","redux/reducers/index.js","redux/sagas/loginSaga.js","redux/sagas/registrationSaga.js","redux/sagas/userSaga.js","redux/sagas/restaurantSaga.js","redux/sagas/restaurantDetails.js","redux/sagas/commentSaga.js","redux/sagas/groupSaga.js","redux/sagas/profile.js","redux/sagas/adminSaga.js","redux/sagas/search.js","redux/sagas/index.js","components/LogOutButton/LogOutButton.js","components/Nav/Nav.js","components/Footer/Footer.js","components/LoginPage/LoginPage.js","components/RegisterPage/RegisterPage.js","components/ProtectedRoute/ProtectedRoute.js","components/UserPage/UserPage.js","components/InfoPage/InfoPage.js","components/RestaurantForm/RestaurantForm.jsx","components/RestaurantListHeader/RestaurantListHeader.jsx","components/RestaurantSearch/RestaurantSearch.jsx","components/RestaurantList/RestaurantList.jsx","components/ClosedText/ClosedText.jsx","components/RestaurantDetails/RestaurantDetails.jsx","components/EditProfileForm/EditProfileForm.jsx","components/GroupGenerator/GroupGenerator.jsx","components/EditProfile/EditProfile.jsx","components/CreateNewGroupForm/CreateNewGroupForm.jsx","components/CreateNewGroup/CreateNewGroup.jsx","components/AdminPage/AdminPage.jsx","components/App/App.js","index.js"],"names":["combineReducers","loginMessage","state","action","type","registrationMessage","loginMode","userReducer","payload","restaurantReducer","detailsReducer","groupReducer","profilePageReducer","profileUserInfo","adminReducer","rootReducer","errors","user","loginUser","logoutUser","loginSaga","put","config","headers","withCredentials","axios","post","console","log","response","status","takeLatest","registerUser","registrationSaga","fetchUser","userSaga","get","data","addRestaurant","fetchRestaurants","restaurantSaga","activeGroupID","takeEvery","getDetails","closeRestaurant","openRestaurant","restaurantDetails","id","detailsID","restaurantID","submitComment","deleteComment","editComment","comments","delete","addGroup","getGroup","fetchGroups","clickActiveGroup","fetchActiveGroup","groups","name","getProfileInfo","updateUserInfo","profile","userID","userId","getAdminGroupInfo","adminSaga","getSearchResults","search","searchText","rootSaga","all","connect","props","className","onClick","dispatch","to","Footer","styles","background","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","backgroundAttachment","height","addForm","margin","padding","backgroundColor","opacity","paddingTop","inputText","color","buttons","LoginPage","username","password","login","event","preventDefault","handleInputChangeFor","propertyName","setState","target","value","Container","this","classes","role","onSubmit","htmlFor","Input","input","onChange","Component","withStyles","loginBackground","RegisterPage","classname","ComponentToShow","ComponentToProtect","component","otherProps","InfoPage","Typography","Box","textAlign","fontSize","infoText","RestaurantForm","newRestaurant","address","city","country","zip","recommended","handleChangeFor","handleSubmit","activeGroup","active_group_id","photo_url","swal","demoClick","style","display","justifyContent","width","InputLabel","required","label","multiline","FormLabel","RadioGroup","selectedRadio","FormControlLabel","radioValues","control","Radio","Select","handlePhotoSelect","Button","variant","reduxStore","EditProfileHeader","getGroupName","handleProfileClick","history","push","handleCreateGroupClick","Grid","headerBar","container","alignItems","justify","spacing","item","xs","group","group_name","withRouter","RestaurantSearch","handleSearchClick","toLowerCase","handleChange","TextField","searchBar","InputProps","endAdornment","InputAdornment","IconButton","RestaurantList","getRestaurants","restaurantClickHandler","restaurantArray","map","restaurant","Card","card","CardContent","key","gutterBottom","CardMedia","listingImage","image","title","length","noListings","noListingsText","RestaurantListHeader","minWidth","bullet","transform","pos","marginBottom","ClosedText","details","closed","RestaurantDetails","commentBox","currentComment","changedComment","commentEditID","handleCommentClick","handleClosedClick","match","params","handleOpenClick","handleCommentChange","handleCommentSubmit","editCommentClick","deleteCommentClick","handleEditCommentChange","handleEditCommentClick","commentsArray","comment","comment_id","user_id","placeholder","alt","src","listing","commentArea","link","EditProfileForm","updatedUserInfo","email","location","currentUserInfo","profileInfo","handleFormSubmit","GroupGenerator","handleGroupClick","EditProfile","getActiveGroup","getGroups","backClick","handleAdminClick","joinGroup","CreateNewGroupForm","newGroup","newGroupName","newGroupID","adminID","CreateNewGroup","AdminPage","App","exact","from","path","UserPage","render","sagaMiddleware","createSagaMiddleware","middlewareList","store","createStore","applyMiddleware","run","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.61243093.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\n\n// loginMessage holds the string that will display\n// on the login screen if there's an error\nconst loginMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_LOGIN_ERROR':\n      return '';\n    case 'LOGIN_INPUT_ERROR':\n      return 'Enter your username and password!';\n    case 'LOGIN_FAILED':\n      return 'Oops! The username and password didn\\'t match. Try again!';\n    case 'LOGIN_FAILED_NO_CODE':\n      return 'Oops! Something went wrong! Is the server running?';\n    default:\n      return state;\n  }\n};\n\n// registrationMessage holds the string that will display\n// on the registration screen if there's an error\nconst registrationMessage = (state = '', action) => {\n  switch (action.type) {\n    case 'CLEAR_REGISTRATION_ERROR':\n      return '';\n    case 'REGISTRATION_INPUT_ERROR':\n      return 'Choose a username and password!';\n    case 'REGISTRATION_FAILED':\n      return 'Oops! That didn\\'t work. The username might already be taken. Try again!';\n    default:\n      return state;\n  }\n};\n\n// make one object that has keys loginMessage, registrationMessage\n// these will be on the redux state at:\n// state.errors.loginMessage and state.errors.registrationMessage\nexport default combineReducers({\n  loginMessage,\n  registrationMessage,\n});\n","const loginMode = (state = 'login', action) => {\n    switch (action.type) {\n      case 'SET_TO_LOGIN_MODE':\n        return 'login';\n      case 'SET_TO_REGISTER_MODE':\n        return 'register';\n      default:\n        return state;\n    }\n  };\n\n// loginMode will be on the redux state at:\n// state.loginMode\n  export default loginMode;\n  ","const userReducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return action.payload;\n    case 'UNSET_USER':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// user will be on the redux state at:\n// state.user\nexport default userReducer;\n","const restaurantReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_RESTAURANTS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default restaurantReducer","const detailsReducer = (state=[{}], action) => {\n    switch (action.type) {\n        case 'SET_DETAILS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default detailsReducer","const groupReducer = (state = [{}], action) => {\n    switch (action.type) {\n        case 'SET_GROUP':\n            return action.payload;\n        case 'SET_ALL_GROUPS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default groupReducer","const profilePageReducer = (state = [{}], action) => {\n    switch (action.type) {\n        case 'SET_ACTIVE_GROUP':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default profilePageReducer;","const profileUserInfo = (state=[{}], action) => {\n    switch(action.type){\n        case 'SET_PROFILE_INFO':\n            return action.payload\n        default:\n            return state;\n    }\n}\n\nexport default profileUserInfo;","const adminReducer = (state={}, action) => {\n    switch(action.type) {\n        case 'SET_ADMIN_INFO':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nexport default adminReducer;","import { combineReducers } from 'redux';\nimport errors from './errorsReducer';\nimport loginMode from './loginModeReducer';\nimport user from './userReducer';\nimport restaurantReducer from './restaurantReducer';\nimport detailsReducer from './detailsReducer';\nimport groupReducer from './groupReducer';\nimport profilePageReducer from './profilePageReducer';\nimport profileUserInfo from './profileUserInfo';\nimport adminReducer from './adminReducer';\n\n// rootReducer is the primary reducer for our entire project\n// It bundles up all of the other reducers so our project can use them.\n// This is imported in index.js as rootSaga\n\n// Lets make a bigger object for our store, with the objects from our reducers.\n// This is what we get when we use 'state' inside of 'mapStateToProps'\nconst rootReducer = combineReducers({\n  errors, // contains registrationMessage and loginMessage\n  loginMode, // will have a value of 'login' or 'registration' to control which screen is shown\n  user, // will have an id and username if someone is logged in\n  restaurantReducer,\n  detailsReducer,\n  groupReducer,\n  profilePageReducer,\n  profileUserInfo,\n  adminReducer,\n});\n\nexport default rootReducer;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"LOGIN\" actions\nfunction* loginUser(action) {\n  try {\n    // clear any existing error on the login page\n    yield put({ type: 'CLEAR_LOGIN_ERROR' });\n\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // send the action.payload as the body\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    yield axios.post('/api/user/login', action.payload, config);\n    \n    // after the user has logged in\n    // get the user information from the server\n    yield put({type: 'FETCH_USER'});\n  } catch (error) {\n    console.log('Error with user login:', error);\n    if (error.response.status === 401) {\n      // The 401 is the error status sent from passport\n      // if user isn't in the database or\n      // if the username and password don't match in the database\n      yield put({ type: 'LOGIN_FAILED' });\n    } else {\n      // Got an error that wasn't a 401\n      // Could be anything, but most common cause is the server is not started\n      yield put({ type: 'LOGIN_FAILED_NO_CODE' });\n    }\n  }\n}\n\n// worker Saga: will be fired on \"LOGOUT\" actions\nfunction* logoutUser(action) {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // when the server recognizes the user session\n    // it will end the session\n    yield axios.post('/api/user/logout', config);\n\n    // now that the session has ended on the server\n    // remove the client-side user object to let\n    // the client-side code know the user is logged out\n    yield put({ type: 'UNSET_USER' });\n\n  } catch (error) {\n    console.log('Error with user logout:', error);\n  }\n}\n\nfunction* loginSaga() {\n  yield takeLatest('LOGIN', loginUser);\n  yield takeLatest('LOGOUT', logoutUser);\n}\n\nexport default loginSaga;\n","import { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\n// worker Saga: will be fired on \"REGISTER\" actions\nfunction* registerUser(action) {\n  try {\n    // clear any existing error on the registration page\n    yield put({ type: 'CLEAR_REGISTRATION_ERROR' });\n\n    // passes the username and password from the payload to the server\n    yield axios.post('/api/user/register', action.payload);\n\n    // automatically log a user in after registration\n    yield put({ type: 'LOGIN', payload: action.payload });\n    \n    // set to 'login' mode so they see the login screen\n    // after registration or after they log out\n    yield put({type: 'SET_TO_LOGIN_MODE'});\n  } catch (error) {\n      console.log('Error with user registration:', error);\n      yield put({type: 'REGISTRATION_FAILED'});\n  }\n}\n\nfunction* registrationSaga() {\n  yield takeLatest('REGISTER', registerUser);\n}\n\nexport default registrationSaga;\n","import axios from 'axios';\nimport { put, takeLatest } from 'redux-saga/effects';\n\n// worker Saga: will be fired on \"FETCH_USER\" actions\nfunction* fetchUser() {\n  try {\n    const config = {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true,\n    };\n\n    // the config includes credentials which\n    // allow the server session to recognize the user\n    // If a user is logged in, this will return their information\n    // from the server session (req.user)\n    const response = yield axios.get('/api/user', config);\n\n    // now that the session has given us a user object\n    // with an id and username set the client-side user object to let\n    // the client-side code know the user is logged in\n    yield put({ type: 'SET_USER', payload: response.data });\n  } catch (error) {\n    console.log('User get request failed', error);\n  }\n}\n\nfunction* userSaga() {\n  yield takeLatest('FETCH_USER', fetchUser);\n}\n\nexport default userSaga;\n","import axios from 'axios';\nimport {takeEvery, put} from 'redux-saga/effects';\n\n\nfunction* addRestaurant(action) {\n    try {\n        console.log(action.payload)\n        //sends new restaurant info to server\n        yield axios.post('/api/restaurant', action.payload)\n        yield put ({\n            type: 'SET_RESTAURANTS'\n        })\n    } catch (error) {\n        console.log('error with add restaurant', error)\n    }\n}\n\nfunction* fetchRestaurants(action) {\n    let activeGroupID = action.payload\n    try {\n        console.log('in fetch restaurants')\n        //fetches list of restaurants user should see\n        const response = yield axios.get(`/api/restaurant/list/${activeGroupID}`)\n        yield put ({\n            type: 'SET_RESTAURANTS',\n            payload: response.data\n        })\n\n    } catch (error) {\n        console.log('error with fetch restaurants', error)\n    }\n}\n\nfunction* restaurantSaga() {\n    yield takeEvery('ADD_RESTAURANT', addRestaurant)\n    yield takeEvery('FETCH_RESTAURANTS', fetchRestaurants)\n\n}\n\nexport default restaurantSaga;","import axios from 'axios';\nimport { takeEvery, put } from 'redux-saga/effects';\n\nfunction* getDetails(action) {\n    try {\n        console.log('in get details');\n        let id = action.payload\n        const response = yield axios.get(`/api/restaurant/${id}`)\n        console.log('saga get details response', response.data);\n        yield put({\n            type: 'SET_DETAILS',\n            payload: response.data\n        })\n    } catch (error) {\n        console.log('error in get details saga', error);\n    }\n}\n\nfunction* closeRestaurant(action) {\n    try {\n        let id = action.payload.id\n        let detailsID = action.payload.restaurantID\n        yield axios.put(`/api/restaurant/closed/${id}`, id)\n        yield put({\n            type: 'GET_DETAILS',\n            payload: detailsID\n        })\n    }\n    catch (error) {\n        console.log('error in close restaurant saga', error);\n    }\n}\n\nfunction* openRestaurant(action) {\n    try {\n        let id = action.payload.id\n        let detailsID = action.payload.restaurantID\n        yield axios.put(`/api/restaurant/open/${id}`, id)\n        yield put({\n            type: 'GET_DETAILS',\n            payload: detailsID\n        })\n    }\n    catch (error) {\n        console.log('error in open restaurant saga', error);\n    }\n}\n\nfunction* restaurantDetails() {\n    yield takeEvery('GET_DETAILS', getDetails)\n    yield takeEvery('CLOSE_RESTAURANT', closeRestaurant)\n    yield takeEvery('OPEN_RESTAURANT', openRestaurant)\n}\n\nexport default restaurantDetails;","import axios from 'axios';\nimport {takeEvery, put} from 'redux-saga/effects';\n\n\nfunction* submitComment(action) {\n    console.log('submit comment payload', action.payload)\n    try {\n        yield axios.post('/api/comment', action.payload)\n        yield put ({\n            type: 'GET_DETAILS',\n            payload: action.payload.id\n        })\n    } catch (error) {\n        console.log('error with submit comment post', error)\n    }\n}\n\nfunction* deleteComment(action) {\n    //action.payload has id of comment to be deleted from click\n    let id = action.payload.id;\n    let detailsID = action.payload.detailsID\n    try {\n        yield axios.delete(`/api/comment/${id}`)\n        yield put ({\n            type: 'GET_DETAILS',\n            payload: detailsID\n        })\n    }\n    catch (error) {\n        console.log('error with delete comment', error)\n    }\n}\n\nfunction* editComment(action) {\n    let id = action.payload.id;\n    let detailsID = action.payload.detailsID\n    console.log('edit comment payload is', action.payload);\n    try {\n        yield axios.put(`/api/comment/${id}`, action.payload)\n        yield put ({\n            type: 'GET_DETAILS',\n            payload: detailsID\n        })\n    }\n    catch (error) {\n        console.log('error with edit comment', error)\n    }\n}\n\nfunction* comments() {\n    yield takeEvery('SUBMIT_COMMENT', submitComment)\n    yield takeEvery('DELETE_COMMENT', deleteComment)\n    yield takeEvery('EDIT_COMMENT', editComment)\n}\n\nexport default comments;","import axios from 'axios';\nimport { takeEvery, put } from 'redux-saga/effects';\n\n\nfunction* addGroup(action) {\n    try {\n        yield axios.post('/api/group', action.payload)\n    }\n    catch (error) {\n        console.log('error in add group saga', error)\n    }\n}\n\nfunction* getGroup(action) {\n    try {\n        const response = yield axios.get('/api/group');\n        yield put ({\n            type: 'SET_GROUP',\n            payload: response.data\n        })\n    } catch (error) {\n        console.log('error in get group saga', error);\n    }\n}\n\nfunction* fetchGroups(action) {\n    try {\n        const response = yield axios.get('/api/group/allgroups');\n        yield put ({\n            type: 'SET_ALL_GROUPS',\n            payload: response.data\n        })\n    } catch (error) {\n        console.log('error in the fetch groups saga', error);\n    }\n}\n\nfunction* clickActiveGroup(action) {\n    try {\n        yield axios.put('/api/group/', action.payload);\n        console.log(action.payload);\n        yield put ({\n            type: 'FETCH_ACTIVE_GROUP',\n            payload: action.payload.name\n        })\n    } catch (error) {\n        console.log('error in the active group saga', error);\n    }\n}\n\nfunction* fetchActiveGroup(action) {\n    let id = action.payload;\n    console.log('fetch active group payload is', action.payload)\n    try {\n        const response = yield axios.get(`/api/group/active/${id}`)\n        yield put({\n            type: 'SET_ACTIVE_GROUP',\n            payload: response.data\n        })\n    } catch (error) {\n        console.log('error in the fetch active group saga', error);\n    }\n}\n\nfunction* groups() {\n    yield takeEvery('ADD_GROUP', addGroup)\n    yield takeEvery('GET_GROUP', getGroup)\n    yield takeEvery('FETCH_ALL_GROUPS', fetchGroups)\n    yield takeEvery('CLICK_ACTIVE_GROUP', clickActiveGroup)\n    yield takeEvery('FETCH_ACTIVE_GROUP', fetchActiveGroup)\n}\n\nexport default groups;","import {put, takeEvery} from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction* getProfileInfo(action) {\n    let userID = action.payload\n    try {\n       const response = yield axios.get(`/api/profile/${userID}`)\n       yield put({\n           type: 'SET_PROFILE_INFO',\n           payload: response.data\n       })\n    }\n    catch (error) {\n        console.log('error in get profile saga', error)\n    }\n}\n\nfunction* updateUserInfo(action) {\n    let userID = action.payload.userId;\n    try {\n        yield axios.put(`/api/profile/${userID}`, action.payload)\n    }\n    catch (error) {\n        console.log('error in updated user info saga', error)\n    }\n}\n\nfunction* profile() {\n    yield takeEvery('GET_PROFILE_INFO', getProfileInfo)\n    yield takeEvery('UPDATE_USER_INFO', updateUserInfo)\n}\n\nexport default profile;","import axios from 'axios';\nimport {put, takeEvery} from 'redux-saga/effects';\n\nfunction* getAdminGroupInfo(action) {\n    let activeGroupID = action.payload\n    try {\n        const response = yield axios.get(`/admin/${activeGroupID}`)\n        yield put ({\n            type: 'SET_ADMIN_INFO',\n            payload: response.data\n        })\n    } catch (error) {\n        console.log('error in admin saga', error)\n    }\n}\n\nfunction* adminSaga() {\n    yield takeEvery('GET_ADMIN_GROUP_INFO', getAdminGroupInfo)\n}\n\nexport default adminSaga;","import axios from 'axios';\nimport {put, takeEvery} from 'redux-saga/effects';\n\nfunction* getSearchResults(action) {\n    let searchText = action.payload\n    try{\n        const response = yield axios.get(`/api/restaurant/search/${searchText}`)\n        yield put ({\n            type: 'SET_RESTAURANTS',\n            payload: response.data\n        })\n    }\n    catch(error) {\n        console.log('error in get search results saga', error);\n    }\n}\n\nfunction* search() {\n    yield takeEvery('GET_SEARCH_RESULTS', getSearchResults)\n}\n\nexport default search;","import { all } from 'redux-saga/effects';\nimport loginSaga from './loginSaga';\nimport registrationSaga from './registrationSaga';\nimport userSaga from './userSaga';\nimport restaurantSaga from './restaurantSaga';\nimport restaurantDetails from './restaurantDetails';\nimport comments from './commentSaga';\nimport groups from './groupSaga';\nimport profile from './profile';\nimport adminSaga from './adminSaga';\nimport search from './search';\n\n// rootSaga is the primary saga.\n// It bundles up all of the other sagas so our project can use them.\n// This is imported in index.js as rootSaga\n\n// some sagas trigger other sagas, as an example\n// the registration triggers a login\n// and login triggers setting the user\nexport default function* rootSaga() {\n  yield all([\n    loginSaga(),\n    registrationSaga(),\n    userSaga(),\n    restaurantSaga(),\n    restaurantDetails(),\n    comments(),\n    groups(),\n    profile(),\n    adminSaga(),\n    search(),\n  ]);\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LogOutButton = props => (\n  <button\n    // This button shows up in multiple locations and is styled differently\n    // because it's styled differently depending on where it is used, the className\n    // is passed to it from it's parents through React props\n    className={props.className}\n    onClick={() => props.dispatch({ type: 'LOGOUT' })}\n  >\n    Log Out\n  </button>\n);\n\n// This component doesn't need 'mapStateToProps'\n// because it doesn't care what the current state is.\n// No matter what the redux state is, this button will always be a log out button\n// this component still needs 'connect' though, because it is going to dispatch a redux action\nexport default connect()(LogOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\nimport './Nav.css';\n// import ListItemIcon from '@material-ui/core/ListItemIcon'\n// import { Home, Book, AccountBox } from '@material-ui/icons'\n\nconst Nav = (props) => (\n  <div className=\"nav\">\n    <Link to=\"/list\">\n      <h2 className=\"nav-title\">TravelEats</h2>\n    </Link>\n    <div className=\"nav-right\">\n      {/* <Link className=\"nav-link\" to=\"/home\">\n        {/* Show this link if they are logged in or not,\n        but call this link 'Home' if they are logged in,\n        and call this link 'Login / Register' if they are not */}\n        {/* {props.user.id ? 'Home' : 'Login / Register'} */}\n      {/* </Link>\n      Show the link to the info page and the logout button if the user is logged in */}\n      {props.user.id && (\n        <>\n          <Link className=\"nav-link\" to=\"/list\">\n            Listings\n          </Link>\n          <Link className=\"nav-link\" to=\"/add\">\n            Add Listing\n          </Link>\n          <Link className=\"nav-link\" to=\"/info\">\n            Info Page\n          </Link>\n          <LogOutButton className=\"nav-link\"/>\n        </>\n      )}\n      {/* Always show this link since the about page is not protected */}\n      <br/>\n    </div>\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user\n// object to determine if they are logged in\n// if they are logged in, we show them a few more links \n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user }) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\nexport default connect(mapStateToProps)(Nav);\n","import React from 'react';\nimport './Footer.css'\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nconst Footer = () => (\n  <footer>\n    &copy; Lightning Roy Inc\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Input from '@material-ui/core/Input';\n\nconst styles = {\n  background: {\n    backgroundImage: \"url('/images/formbackground.jpg')\",\n    backgroundSize: 'cover',\n    backgroundPosition: 'center center',\n    backgroundRepeat: 'no-repeat',\n    backgroundAttachment: 'fixed',\n    height: '725px',\n  },\n  addForm: {\n    margin: '10px',\n    padding: '10px',\n    backgroundColor: '#ffa726',\n    opacity: '0.9',\n    paddingTop: '30px',\n    opacity: '.8'\n  },\n  inputText: {\n    color: 'black',\n  },\n  buttons: {\n    backgroundColor: 'grey',\n  }\n}\nclass LoginPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  login = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'LOGIN',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'LOGIN_INPUT_ERROR' });\n    }\n  } // end login\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <Container className={this.props.classes.background}>\n        <div className={this.props.classes.addForm}>\n          {this.props.errors.loginMessage && (\n            <h2\n              className=\"alert\"\n              role=\"alert\"\n            >\n              {this.props.errors.loginMessage}\n            </h2>\n          )}\n          <form onSubmit={this.login}>\n            <h1>Login</h1>\n            <div>\n              <label htmlFor=\"username\" className={this.props.classes.inputText}>\n                Username:\n              <Input\n                  className={this.props.classes.input}\n                  type=\"text\"\n                  name=\"username\"\n                  value={this.state.username}\n                  onChange={this.handleInputChangeFor('username')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"password\" className={this.props.classes.inputText}>\n                Password:\n              <Input\n                  className={this.props.classes.input}\n                  type=\"password\"\n                  name=\"password\"\n                  value={this.state.password}\n                  onChange={this.handleInputChangeFor('password')}\n                />\n              </label>\n            </div>\n            <div>\n              <center>\n              <input\n                className=\"log-in\"\n                type=\"submit\"\n                name=\"submit\"\n                value=\"Log In\"\n                className={this.props.classes.buttons}\n              />\n              </center>\n            </div>\n          </form>\n          <center>\n            <button\n              type=\"button\"\n              className={this.props.classes.buttons}\n              onClick={() => { this.props.dispatch({ type: 'SET_TO_REGISTER_MODE' }) }}\n            >\n              Register\n          </button>\n          </center>\n        </div>\n      </Container>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(withStyles(styles)(LoginPage));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst styles = {\n  loginBackground: {\n    backgroundImage: \"url('/images/formbackground.jpg')\",\n    backgroundSize: 'cover',\n    backgroundPosition: 'center center',\n    backgroundRepeat: 'no-repeat',\n    backgroundAttachment: 'fixed',\n    height: '725px',\n  },\n  inputText: {\n    color: 'black',\n  },\n  buttons: {\n    backgroundColor: 'grey',\n  },\n  addForm: {\n    padding: '10px',\n    backgroundColor: '#ffa726',\n    opacity: '0.9',\n    paddingTop: '30px',\n    opacity: '.8'\n  },\n}\n\nclass RegisterPage extends Component {\n  state = {\n    username: '',\n    password: '',\n  };\n\n  registerUser = (event) => {\n    event.preventDefault();\n\n    if (this.state.username && this.state.password) {\n      this.props.dispatch({\n        type: 'REGISTER',\n        payload: {\n          username: this.state.username,\n          password: this.state.password,\n        },\n      });\n    } else {\n      this.props.dispatch({ type: 'REGISTRATION_INPUT_ERROR' });\n    }\n  } // end registerUser\n\n  handleInputChangeFor = propertyName => (event) => {\n    this.setState({\n      [propertyName]: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n        <div classname={this.props.classes.loginBackground}>\n          {this.props.errors.registrationMessage && (\n            <h2\n              className=\"alert\"\n              role=\"alert\"\n            >\n              {this.props.errors.registrationMessage}\n            </h2>\n          )}\n          <Container classname={this.props.classes.loginBackground}>\n          <form \n          className={this.props.classes.addForm}\n          onSubmit={this.registerUser}>\n            <h1>Register User</h1>\n            <div>\n              <label htmlFor=\"username\">\n                Username:\n              <input\n                  type=\"text\"\n                  name=\"username\"\n                  value={this.state.username}\n                  onChange={this.handleInputChangeFor('username')}\n                />\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"password\">\n                Password:\n              <input\n                  type=\"password\"\n                  name=\"password\"\n                  value={this.state.password}\n                  onChange={this.handleInputChangeFor('password')}\n                />\n              </label>\n            </div>\n            <div>\n              <input\n                className=\"register\"\n                type=\"submit\"\n                name=\"submit\"\n                value=\"Register\"\n              />\n            </div>\n          </form>\n          </Container>\n          <center>\n            <button\n            className={this.props.classes.buttons}\n              type=\"button\"\n              className=\"link-button\"\n              onClick={() => { this.props.dispatch({ type: 'SET_TO_LOGIN_MODE' }) }}\n            >\n              Login\n          </button>\n          </center>\n        </div>\n    );\n  }\n}\n\n// Instead of taking everything from state, we just want the error messages.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({errors}) => ({ errors });\nconst mapStateToProps = state => ({\n  errors: state.errors,\n});\n\nexport default connect(mapStateToProps)(withStyles(styles)(RegisterPage));\n\n","import React from 'react';\nimport {Route} from 'react-router-dom'\nimport {connect} from 'react-redux';\nimport LoginPage from '../LoginPage/LoginPage';\nimport RegisterPage from '../RegisterPage/RegisterPage';\n\n// A Custom Wrapper Component -- This will keep our code DRY.\n// Responsible for watching redux state, and returning an appropriate component\n// API for this component is the same as a regular route\n\n// THIS IS NOT SECURITY! That must be done on the server\n// A malicious user could change the code and see any view\n// so your server-side route must implement real security\n// by checking req.isAuthenticated for authentication\n// and by checking req.user for authorization\n\nconst ProtectedRoute = (props) => {\n  // Using destructuring, this takes ComponentToProtect from component\n  // prop and grabs all other props to pass them along to Route\n  const {\n    // Alias prop 'component' as 'ComponentToProtect'\n    component: ComponentToProtect,\n    user,\n    loginMode,\n    ...otherProps\n  } = props;\n\n  let ComponentToShow;\n\n  if(user.id) {\n    // if the user is logged in (only logged in users have ids)\n    // show the component that is protected\n    ComponentToShow = ComponentToProtect;\n  } else if (loginMode === 'login') {\n    // if they are not logged in, check the loginMode on Redux State\n    // if the mode is 'login', show the LoginPage\n    ComponentToShow = LoginPage;\n  } else {\n    // the the user is not logged in and the mode is not 'login'\n    // show the RegisterPage\n    ComponentToShow = RegisterPage;\n  }\n\n  // We return a Route component that gets added to our list of routes\n  return (\n      <Route\n        // all props like 'exact' and 'path' that were passed in\n        // are now passed along to the 'Route' Component\n        {...otherProps}\n        component={ComponentToShow}\n      />\n  )\n}\n\n// Instead of taking everything from state, we just want the user and loginMode\n// to determine which page we should show the user\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({ user, loginMode }) => ({ user, loginMode });\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    loginMode: state.loginMode,\n  }\n}\n\nexport default connect(mapStateToProps)(ProtectedRoute)\n\n\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport LogOutButton from '../LogOutButton/LogOutButton';\n\n// this could also be written with destructuring parameters as:\n// const UserPage = ({ user }) => (\n// and then instead of `props.user.username` you could use `user.username`\nconst UserPage = (props) => (\n  <div>\n    <h1 id=\"welcome\">\n      Welcome, { props.user.username }!\n    </h1>\n    <p>Your ID is: {props.user.id}</p>\n    <LogOutButton className=\"log-in\" />\n  </div>\n);\n\n// Instead of taking everything from state, we just want the user info.\n// if you wanted you could write this code like this:\n// const mapStateToProps = ({user}) => ({ user });\nconst mapStateToProps = state => ({\n  user: state.user,\n});\n\n// this allows us to use <App /> in index.js\nexport default connect(mapStateToProps)(UserPage);\n","import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\n\nconst styles = {\n  background: {\n    backgroundImage: \"url('/images/formbackground.jpg')\",\n    backgroundSize: 'cover',\n    backgroundPosition: 'center center',\n    backgroundRepeat: 'no-repeat',\n    backgroundAttachment: 'fixed',\n    height: \"600px\",\n  },\n  infoText: {\n    backgroundColor: '#ffa726',\n    opacity: '0.9',\n    color: 'black'\n  }\n}\n\n// This is one of our simplest components\n// It doesn't have local state, so it can be a function component.\n// It doesn't dispatch any redux actions or display any part of redux state\n// or even care what the redux state is, so it doesn't need 'connect()'\n\nclass InfoPage extends Component {\n  render() {\n    return (\n      <div>\n        <Container className={this.props.classes.background}>\n          <div className=\"formDiv\">\n            <Typography component=\"div\">\n              <Box textAlign=\"center\" fontSize=\"h3.fontSize\" className=\"formName\">What is TravelEats?\n                    </Box>\n            </Typography>\n          </div>\n          <p className={this.props.classes.infoText}>\n            TravelEats is a travel journal and restaurant listing service for groups to use to be able to share memories and\n            restaurant recommendations with each other, no matter where in the world (or beyond!) their travels may take them.\n        <br />\n            Bon Voyage!\n          </p>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(styles)(InfoPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel'\nimport { withStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport { Select } from '@material-ui/core';\nimport swal from '@sweetalert/with-react';\nimport Button from \"@material-ui/core/Button\";\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport './RestaurantForm.css';\nimport Container from '@material-ui/core/Container';\n\nconst styles = {\n    background: {\n        backgroundImage: \"url('/images/formbackground.jpg')\",\n        backgroundSize: 'cover',\n        backgroundPosition: 'center center',\n        backgroundRepeat: 'no-repeat',\n        backgroundAttachment: 'fixed',\n        height: \"100%\",\n    },\n    addForm: {\n        padding: '10px',\n        backgroundColor: '#ffa726',\n        opacity: '0.9',\n        color: 'black'\n    },\n    radioValues: {\n        color: 'black',\n    }\n}\n\nclass RestaurantForm extends Component {\n    state = {\n        newRestaurant: {\n            name: '',\n            type: '',\n            address: '',\n            city: '',\n            state: '',\n            country: '',\n            zip: '',\n            comments: '',\n            recommended: true,\n            type: 'American'\n        }\n    }\n    //this handles the changes for the whole form,\n    //including the radio buttons and sends to local state\n    handleChangeFor = (event, propertyName) => {\n        this.setState({\n            newRestaurant: {\n                ...this.state.newRestaurant,\n                [propertyName]: event.target.value,\n            }\n        });\n    }\n\n    //submits new restaurant from local state to redux\n    handleSubmit = (event) => {\n        event.preventDefault();\n        console.log('form submitted');\n\n        this.props.dispatch({\n            type: 'ADD_RESTAURANT',\n            payload: {\n                newRestaurant: this.state.newRestaurant,\n                activeGroup: this.props.user.active_group_id\n            }\n        })\n\n        this.setState({\n            newRestaurant: {\n                name: '',\n                type: '',\n                address: '',\n                city: '',\n                state: '',\n                country: '',\n                zip: '',\n                comments: '',\n                recommended: true,\n                photo_url: ''\n\n            }\n        })\n        swal(\n            <div>\n                <h1>Restaurant submitted successfully!</h1>\n            </div >\n        )\n    }\n\n    demoClick = () => {\n        this.setState({\n            newRestaurant: {\n                name: 'The Handsome Hog',\n                address: '203 6th St E',\n                city: 'St Paul',\n                state: 'MN',\n                country: 'United States',\n                zip: '55101',\n                comments: 'Incredible BBQ, great atmosphere. Bourbon and smoke, what more could you need?',\n                recommended: true,\n                type: 'BBQ'\n            }\n        })\n    }\n\n    render() {\n\n        return (\n            <Container className={this.props.classes.background}>\n                <div className=\"formDiv\">\n                    <Typography component=\"div\">\n                        <Box onClick={() => this.demoClick()} textAlign=\"center\" fontSize=\"h3.fontSize\" className=\"formName\">Add a Restaurant\n                    </Box>\n                    </Typography>\n                </div>\n                <div style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: 20,\n                    padding: 20\n                }}\n                >\n                    <form style={{ width: \"75%\" }} className={this.props.classes.addForm} onSubmit={this.handleSubmit}>\n                        <InputLabel htmlFor=\"text\">Name</InputLabel>\n                        <Input\n                            required\n                            label=\"name\"\n                            value={this.state.newRestaurant.name}\n                            onChange={(event) => this.handleChangeFor(event, 'name')} />\n                        <InputLabel htmlFor=\"text\">Address</InputLabel>\n                        <Input\n                            required\n                            value={this.state.newRestaurant.address}\n                            onChange={(event) => this.handleChangeFor(event, 'address')} />\n                        <InputLabel htmlFor=\"text\">City</InputLabel>\n                        <Input\n                            required\n                            value={this.state.newRestaurant.city}\n                            onChange={(event) => this.handleChangeFor(event, 'city')} />\n                        <InputLabel htmlFor=\"text\">State</InputLabel>\n                        <Input\n                            required\n                            value={this.state.newRestaurant.state}\n                            onChange={(event) => this.handleChangeFor(event, 'state')} />\n                        <InputLabel htmlFor=\"text\">Country</InputLabel>\n                        <Input\n                            required\n                            value={this.state.newRestaurant.country}\n                            onChange={(event) => this.handleChangeFor(event, 'country')} />\n                        <InputLabel htmlFor=\"text\">Zip</InputLabel>\n                        <Input\n                            required\n                            value={this.state.newRestaurant.zip}\n                            onChange={(event) => this.handleChangeFor(event, 'zip')} />\n                        <InputLabel htmlFor=\"text\">Comments</InputLabel>\n                        <Input\n                            required\n                            multiline\n                            value={this.state.newRestaurant.comments}\n                            onChange={(event) => this.handleChangeFor(event, 'comments')} />\n                        <FormLabel component=\"legend\"></FormLabel>\n                        <RadioGroup label=\"Recommended?\" name=\"recommended\" value={this.props.selectedRadio} onChange={(event) => this.handleChangeFor(event, 'recommended')}>\n                            <FormControlLabel className={this.props.classes.radioValues} value=\"recommended\" control={<Radio />} label=\"Recommended\" />\n                            <FormControlLabel className={this.props.classes.radioValues} value=\"notRecommended\" control={<Radio />} label=\"Not Recommended\" />\n                        </RadioGroup>\n                        <InputLabel>\n                            Select cusine type:\n                            </InputLabel>\n                        <Select required value={this.state.newRestaurant.type} onChange={(event) => this.handleChangeFor(event, 'type')}>\n                            <option value=\"American\">American</option>\n                            <option value=\"Bbq\">BBQ</option>\n                            <option value=\"British\">British</option>\n                            <option value=\"Central American\">Central American</option>\n                            <option value=\"Chinese\">Chinese</option>\n                            <option value=\"Ethiopian\">Ethiopian</option>\n                            <option value=\"German\">German</option>\n                            <option value=\"Greek\">Greek</option>\n                            <option value=\"Irish\">Irish</option>\n                            <option value=\"Italian\">Italian</option>\n                            <option value=\"Japanese\">Japanese</option>\n                            <option value=\"Korean\">Korean</option>\n                            <option value=\"Lebanese\">Lebanese</option>\n                            <option value=\"Mexican\">Mexican</option>\n                            <option value=\"Middle Eastern\">Middle Eastern</option>\n                            <option value=\"Polish\">Polish</option>\n                            <option value=\"Russian\">Russian</option>\n                            <option value=\"South American\">South American</option>\n                            onChange={this.handlePhotoSelect}\n                        </Select>\n                        <br />\n                        <br />\n                        {/* </FormControl> */}\n                        <Button variant=\"outlined\" color=\"primary\" type=\"submit\" value=\"Add Restaurant\">Submit</Button>\n                    </form>\n                    <br />\n                </div>\n            </Container >\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        user: reduxStore.user\n    }\n}\nexport default connect(mapStateToProps)(withStyles(styles)(RestaurantForm));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { withRouter } from 'react-router-dom';\nimport { Grid } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport {withStyles} from '@material-ui/core/styles';\n\nconst styles = {\n    headerBar: {\n        margin: '5px',\n        padding: '5px'\n    }\n}\n\nclass EditProfileHeader extends Component {\n\n    componentDidMount() {\n        this.getGroupName();\n    }\n\n    getGroupName = () => {\n        this.props.dispatch({\n            type: 'GET_GROUP',\n            payload: this.props.user.id\n        })\n    }\n\n    handleProfileClick = (id) => {\n        this.props.history.push(`/profile/${id}`)\n    }\n\n    handleCreateGroupClick = (id) => {\n        this.props.history.push(`/create_group`)\n    }\n\n    render() {\n\n        return (\n            <div>\n                <div>\n                    <Grid className={this.props.classes.headerBar} container alignItems={'center'} justify={'space-evenly'} spacing={2} >\n                        <Grid item xs>\n                            <Button variant=\"outlined\" onClick={() => this.handleProfileClick(this.props.user.id)}>Edit Profile</Button>\n                        </Grid>\n                        <Grid item xs>\n                            <Box textAlign=\"center\" fontSize=\"h6.fontSize\">Welcome, {this.props.user.username}!\n                            </Box>\n                        </Grid>\n                        <Grid item xs>\n                            <Button variant=\"outlined\" onClick={() => this.handleCreateGroupClick(this.props.user.id)}>Create Group</Button>\n                        </Grid>\n                    </Grid>\n                    <span>\n                        <Grid container justify={'space-between'} spacing={8} >\n                            <Grid item xs>\n                        <Box textAlign=\"center\" fontSize=\"h6.fontSize\">Your current active group is: \n                        {this.props.group[0] ? (\n                        this.props.group[0].group_name ) : (\n                            <p>None! Click on Edit Profile to join a Group with the Group ID your Group Administrator provided or\n                                Create Group to create a new group!<br/>\n                            <Button onClick={() => this.handleProfileClick(this.props.user.id)} variant=\"outlined\">Edit Profile</Button></p>\n                                            \n                        )}\n                        </Box>\n                            </Grid>\n                        </Grid>\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        reduxStore,\n        user: reduxStore.user,\n        group: reduxStore.groupReducer,\n        profile: reduxStore.profilePageReducer,\n    }\n}\nexport default connect(mapStateToProps)(withStyles(styles)(withRouter(EditProfileHeader)));","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport TextField from '@material-ui/core/TextField';\nimport swal from '@sweetalert/with-react';\nimport {withStyles} from '@material-ui/core/styles';\n\nconst styles = {\n    searchBar: {\n        color: 'black',\n        backgroundColor: '#ffa726',\n        opacity: '.8',\n        margin: '5px'\n    }\n}\n\n\nclass RestaurantSearch extends Component {\n    state={\n        searchText: ''\n    }\n    \n    handleSearchClick = () => {\n        if (this.state.searchText === '') {\n            swal (\n                <h1>\n                    Please enter a city to search for!\n                </h1>\n            )\n            return;\n        }\n        console.log('search clicked');\n        let searchText = this.state.searchText.toLowerCase();\n        this.props.dispatch({\n            type: 'GET_SEARCH_RESULTS',\n            payload: searchText\n        })\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            searchText: event.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <TextField\n                className={this.props.classes.searchBar}\n                label=\"Search by City\"\n                onChange={(event) => this.handleChange(event)}\n                InputProps={{\n                    endAdornment: (\n                        <InputAdornment>\n                        <IconButton>\n                            <SearchIcon onClick={this.handleSearchClick}/>\n                            </IconButton>\n                            </InputAdornment>\n                    )\n                }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default connect()(withStyles(styles)(RestaurantSearch));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './RestaurantList.css'\nimport RestaurantListHeader from '../RestaurantListHeader/RestaurantListHeader';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Container from '@material-ui/core/Container';\nimport RestaurantSearch from '../RestaurantSearch/RestaurantSearch';\n\nconst styles = {\n    card: {\n        minWidth: 275,\n        backgroundColor: '#ffa726',\n        opacity: '.9',\n        margin: '10px',\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.8)',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n    background: {\n        backgroundImage: \"url('/images/formbackground.jpg')\",\n        backgroundSize: 'cover',\n        backgroundPosition: 'center center',\n        backgroundRepeat: 'no-repeat',\n        backgroundAttachment: 'fixed',\n        height: \"100%\",\n    },\n    listingImage: {\n        width: 'auto',\n        height: '250px'\n    },\n    noListings: {\n        backgroundImage: \"url('/images/formbackground.jpg')\",\n        backgroundSize: 'cover',\n        backgroundPosition: 'center center',\n        backgroundRepeat: 'no-repeat',\n        backgroundAttachment: 'fixed',\n        height: \"750px\",\n    },\n    noListingsText: {\n        margin: '10px',\n        textAlign: 'center'\n    }\n};\n\nclass RestaurantList extends Component {\n\n\n    componentDidMount() {\n        this.getRestaurants();\n    }\n\n    getRestaurants = () => {\n        if (this.props.user.active_group_id) {\n            this.props.dispatch({\n                type: 'FETCH_RESTAURANTS',\n                payload: this.props.user.active_group_id\n            })\n        }\n    }\n\n    restaurantClickHandler = (id) => {\n        console.log('in restaurant click handler');\n        console.log('id is', id)\n        this.props.dispatch({\n            type: 'GET_DETAILS',\n            payload: id\n        })\n        this.props.history.push(`/details/${id}`)\n    }\n\n    render() {\n        let restaurantArray = this.props.reduxStore.restaurantReducer.map(restaurant => {\n            return (\n                <Card className={this.props.classes.card}>\n                    <CardContent>\n                        <div className=\"restaurantListing\" key={restaurant.id} onClick={() => this.restaurantClickHandler(restaurant.id)}>\n                            <Typography variant=\"h4\" className=\"title\" gutterBottom>\n                                {restaurant.name}\n                            </Typography>\n                            <CardMedia\n                                className={this.props.classes.listingImage}\n                                image={restaurant.photo_url}\n                                title={restaurant.id}\n                            />\n                            <Typography variant=\"paragraph\">\n                                <p>{restaurant.type}</p>\n                                {restaurant.address} {restaurant.city}, {restaurant.state} {restaurant.zip}\n                                <br />\n                                {restaurant.country}\n                            </Typography>\n                        </div>\n                    </CardContent>\n                </Card>\n            )\n        })\n        console.log(this.props.user.active_group_id)\n        if (restaurantArray.length === 0 && this.props.user.active_group_id != null) {\n            return (\n                <div>\n                    <Container className={this.props.classes.noListings}>\n                        <Typography className={this.props.classes.noListingsText} variant=\"h5\">\n                            There are no results in this city yet. Go out and explore and add some listings!\n                        </Typography>\n                    </Container>\n                </div>\n            )\n        }\n        return (\n            <div>\n                <Container className={this.props.classes.background}>\n                    <RestaurantListHeader />\n                    {this.props.user.active_group_id != null && <RestaurantSearch />}\n                    {restaurantArray}\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        reduxStore,\n        user: reduxStore.user\n    }\n}\nexport default connect(mapStateToProps)(withStyles(styles)(RestaurantList));","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\n//creates CLOSED text on details page when restaurant is marked closed\n\nclass ClosedText extends Component {\n    render() {\n        return (\n            <div>\n                {this.props.details[0].closed &&\n                <h1>CLOSED</h1>}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        details: reduxStore.detailsReducer\n    }\n}\nexport default connect(mapStateToProps)(ClosedText);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport './RestaurantDetails.css';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport TextField from '@material-ui/core/TextField';\nimport swal from '@sweetalert/with-react';\nimport ClosedText from '../ClosedText/ClosedText';\nimport Container from '@material-ui/core/Container';\n\n//THIS IS THE DETAILS PAGE FOR EACH INDIVIDUAL RESTAURANT\n\nconst styles = {\n    listing: {\n        backgroundImage: \"url('/images/formbackground.jpg')\",\n        backgroundSize: 'cover',\n        backgroundPosition: 'center center',\n        backgroundRepeat: 'no-repeat',\n        backgroundAttachment: 'fixed',\n        height: \"100%\",\n    },\n    commentArea: {\n        padding: '10px',\n        backgroundColor: '#ffa726',\n        opacity: '0.9',\n        margin: '8px'\n    },\n    listingImage: {\n        width: '350px',\n        height: '200px'\n    }\n\n}\n\n\nclass RestaurantDetails extends Component {\n\n    state = {\n        commentBox: true,\n        currentComment: '',\n        changedComment: '',\n        editComment: false,\n        commentEditID: 0,\n    }\n\n    componentDidMount() {\n        //on mount, get the details of the restaurant we are looking at\n        this.props.dispatch({\n            type: 'GET_DETAILS',\n            payload: this.props.match.params.id\n        })\n    }\n\n    handleCommentClick = () => {\n        //changes state when the comment box is clicked to conditionally render edit field\n        this.setState({\n            commentBox: !this.state.commentBox\n        })\n    }\n\n    handleClosedClick = (id) => {\n        //dispatches action to close restaurant and conditionally render required elements\n        this.props.dispatch({\n            type: 'CLOSE_RESTAURANT',\n            payload: {\n                id: id,\n                restaurantID: this.props.match.params.id\n            }\n        })\n    }\n\n    handleOpenClick = (id) => {\n        //dispatches action to remove elements that were rendered when restaurant was marked closed\n        this.props.dispatch({\n            type: 'OPEN_RESTAURANT',\n            payload: {\n                id: id,\n                restaurantID: this.props.match.params.id\n            }\n        })\n    }\n\n    handleCommentChange = (event) => {\n        //sets state as user is changing their comment\n        this.setState({\n            currentComment: event.target.value\n        })\n    }\n\n    handleCommentSubmit = (id) => {\n        //handles submitting a new comment\n        this.setState({\n            editComment: !this.state.editComment\n        })\n        this.props.dispatch({\n            type: 'SUBMIT_COMMENT',\n            payload: {\n                currentComment: this.state.currentComment,\n                id: id,\n                restaurant: this.props.match.params.id,\n            }\n        })\n\n        this.setState({\n            commentBox: !this.state.commentBox\n        })\n        //sweet alert for comment being submitted\n        swal(\n            <div>\n                <h1>Comment submitted!</h1>\n            </div>\n        )\n    }\n\n    editCommentClick = (id) => {\n        //changes state for comment edit button being clicked to conditionally render input for\n        //editing the comment\n        this.setState({\n            editComment: true,\n            commentEditID: id\n        })\n    }\n\n    deleteCommentClick = (id) => {\n        //dispatches action to delete comment from database\n        console.log('id for delete comment payload is', id)\n        if (this.props.details.length > 1) {\n            this.props.dispatch({\n                type: 'DELETE_COMMENT',\n                payload: {\n                    id: id,\n                    detailsID: this.props.match.params.id\n                }\n            })\n            //sweet alert to let user know their comment has been deleted\n            swal(\n                <div>\n                    <h1>Comment deleted!</h1>\n                </div>\n            )\n        } else {\n            //disallows last comment from being deleted\n            swal(\n                <div>\n                    <h1>You cannot delete the only comment, we need to know your thoughts!</h1>\n                </div>\n            )\n            return;\n        }\n    }\n\n    handleEditCommentChange = (event) => {\n        //sets state when user is editing a comment \n        this.setState({\n            changedComment: event.target.value\n        })\n    }\n\n    handleEditCommentClick = (id) => {\n        //dispatches action to send changed comment to redux\n        this.props.dispatch({\n            type: 'EDIT_COMMENT',\n            payload: {\n                id: id,\n                detailsID: this.props.match.params.id,\n                changedComment: this.state.changedComment\n            }\n        })\n        this.setState({\n            editComment: !this.state.editComment,\n        })\n        //sweet alert to let user know comment has been edited\n        swal(\n            <div>\n                <h1>Comment edited!</h1>\n            </div>\n        )\n    }\n\n\n\n    render() {\n        //creates array of all comments for current restaurant\n        let commentsArray = this.props.details.map(comment => {\n            return (\n                <div>\n                    <div className=\"commentList\" key={comment.comment_id}>\n                        {/* conditionally renders recommendation */}\n                        <p>{comment.username} says: {comment.recommended ?  (<p>Recommended</p>) :\n                            (<p>Not Recommended</p>)}</p>\n                        <p>{comment.comment}</p>\n                    </div>\n                    <div>\n                        {/* conditionally renders edit and delete comment buttons based on userID */}\n                        {this.props.user.id === comment.user_id &&\n                            <Button variant=\"outlined\" onClick={() => this.editCommentClick(comment.comment_id)}>Edit Comment</Button>}\n                        {this.props.user.id === comment.user_id &&\n                            <Button variant=\"outlined\" onClick={() => this.deleteCommentClick(comment.comment_id)}>Delete Comment</Button>}\n                    </div>\n                    <div>\n                        {/* conditionally renders input for edit comment */}\n                        {this.state.commentEditID === comment.comment_id && this.state.editComment &&\n                            <div>\n                                <Input onChange={this.handleEditCommentChange} placeholder=\"edit comment\" />\n                                <Button onClick={() => this.handleEditCommentClick(comment.comment_id)} variant=\"outlined\">Submit Edit</Button>\n                            </div>}\n                    </div>\n                </div>\n            )\n        })\n\n        let restaurantArray =\n        // uses first index in array from redux store to get needed restaurant information\n            <div className=\"restaurantDetails\">\n                <h1>{this.props.details[0].name}</h1>\n                <p>{this.props.details[0].type}</p>\n                <div>\n                    {/* handles rendering closed or not closed picture for restaurant based on click */}\n                    {this.props.details[0].closed ? (\n                        <img className={this.props.classes.listingImage} alt=\"closed\" src={`/images/closed.jpg`} />\n                    ) : (\n                            <img className={this.props.classes.listingImage} alt={this.props.details[0].id} src={this.props.details[0].photo_url} />\n                        )}\n                    <p>{this.props.details[0].address} {this.props.details[0].city}, {this.props.details[0].state} {this.props.details[0].zip}\n                    </p>\n                </div>\n                <div>\n                    {/* conditionally renders comment input and submit button for new comment */}\n                    {this.state.commentBox ? (\n                        <Button variant=\"outlined\" onClick={() => this.handleCommentClick(this.props.details[0].id)}>Comment</Button>\n                    ) : (\n                            <div>\n                                <TextField\n                                    onChange={this.handleCommentChange}\n                                    placeholder=\"Comment!\" />\n                                <Button variant=\"outlined\" onClick={() => this.handleCommentSubmit(this.props.details[0].id)}>Submit</Button>\n                            </div>\n                        )}\n                </div>\n                {/* handle conditional render for open or closed button */}\n                {this.props.details[0].closed ? (\n                    <Button onClick={() => this.handleOpenClick(this.props.details[0].id)} variant=\"outlined\">Open?</Button>\n                ) : (\n                        <Button onClick={() => this.handleClosedClick(this.props.details[0].id)} variant=\"outlined\">Closed?</Button>\n                    )}\n            </div>\n\n        return (\n            <div>\n                <Container className={this.props.classes.listing}>\n                    <ClosedText />\n                    <Container className={this.props.classes.commentArea}>\n                        <div>\n                            <Container className={this.props.classes.link}>\n                                <div>\n                                    {/* button to send users back to list on click */}\n                                    <Button\n                                        variant=\"outlined\"\n                                        onClick={() => { this.props.history.push('/list') }}\n                                    >Back to Listings</Button>\n                                </div>\n                            </Container>\n                        </div>\n                        {restaurantArray}\n                    </Container>\n                    <Container className={this.props.classes.commentArea}>\n                        {commentsArray}\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        details: reduxStore.detailsReducer,\n        comment: reduxStore.comment,\n        user: reduxStore.user\n    }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(RestaurantDetails));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport {withStyles} from '@material-ui/core/styles';\n\nconst styles = {\n    addForm: {\n        padding: '10px',\n    }\n}\n\nclass EditProfileForm extends Component {\n\n    state = {\n        updatedUserInfo: {\n            email: '',\n            name: '',\n            location: '',\n        },\n        currentUserInfo: {\n            email: this.props.profileInfo[0].email,\n            name: this.props.profileInfo[0].name,\n            location: this.props.profileInfo[0].location\n        }\n    }\n\n    componentDidMount() {\n        this.getProfileInfo();\n        console.log('state is', this.state)\n    }\n    //gets all profile info for user\n    getProfileInfo = () => {\n        this.props.dispatch({\n            type: 'GET_PROFILE_INFO',\n            payload: this.props.user.id\n        })\n        this.setState({\n            currentUserInfo: {\n                email: this.props.profileInfo.email,\n                name: this.props.profileInfo.name,\n                location: this.props.profileInfo.location\n            }\n        })\n        console.log('state after get profile info', this.state)\n    }\n    //handles changes for all properties on form\n    handleChangeFor = (event, propertyName) => {\n        this.setState({\n            updatedUserInfo: {\n                ...this.state.updatedUserInfo,\n                [propertyName]: event.target.value,\n            }\n        });\n    }\n    //handles submission of form to redux\n    handleFormSubmit = (event) => {\n        event.preventDefault();\n        console.log('form submitted');\n        this.props.dispatch({\n            type: 'UPDATE_USER_INFO',\n            payload: {\n                updatedUserInfo: this.state.updatedUserInfo,\n                userId: this.props.user.id\n            }\n        })\n        this.getProfileInfo();\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <form onSubmit={this.handleFormSubmit} className={this.props.classes.addForm}>\n                        <InputLabel htmlFor=\"text\">Email Address</InputLabel>\n                        <Input\n                            value={this.state.currentUserInfo.email}\n                            onChange={(event) => this.handleChangeFor(event, 'email')} />\n                        <InputLabel htmlFor=\"text\">Name</InputLabel>\n                        <Input\n                            value={this.state.currentUserInfo.name}\n                            onChange={(event) => this.handleChangeFor(event, 'name')} />\n                        <InputLabel htmlFor=\"text\">Location</InputLabel>\n                        <Input\n                            value={this.state.currentUserInfo.location}\n                            onChange={(event) => this.handleChangeFor(event, 'location')} />\n                            <br />\n                            <br />\n                        <Button variant=\"outlined\" type=\"submit\">Submit</Button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        user: reduxStore.user,\n        profileInfo: reduxStore.profileUserInfo\n    }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(EditProfileForm));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\n\n\n\nclass GroupGenerator extends Component {\n    \n    //changes what group a user is actively in on click\n    handleGroupClick = (name) => {\n        console.log('clicked name', name);\n        console.log('id of click', this.props.user.id)\n        this.props.dispatch({\n            type: 'CLICK_ACTIVE_GROUP',\n            payload: {\n                name: name,\n                id: this.props.user.id\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {/* maps over array from reducer to generate all groups user is a memeber of */}\n                {this.props.group.map(group => {\n                    return (\n                        <div>\n                            <Button value={group.group_name} onClick={() => this.handleGroupClick(group.id)}variant=\"outline\">\n                            {group.group_name}\n                            </Button>\n                        </div>\n                    )\n                })}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        group: reduxStore.groupReducer,\n        user: reduxStore.user\n    }\n}\nexport default connect(mapStateToProps)(GroupGenerator);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport EditProfileForm from '../EditProfileForm/EditProfileForm';\nimport GroupGenerator from '../GroupGenerator/GroupGenerator';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\n//PROFILE EDIT VIEW\nconst styles = {\n    joinGroup: {\n        padding: '10px',\n    }\n}\n\nclass EditProfile extends Component {\n\n    componentDidMount() {\n        console.log('props are', this.props)\n        this.getGroups();\n        this.getActiveGroup();\n    }\n    //gets group that user is currently active in\n    getActiveGroup = () => {\n        this.props.dispatch({\n            type: 'FETCH_ACTIVE_GROUP',\n            payload: this.props.user.id\n        })\n    }\n    //gets all groups user is a part of\n    getGroups = () => {\n        this.props.dispatch({\n            type: 'FETCH_ALL_GROUPS'\n        })\n    }\n    backClick = () => {\n        this.props.history.push('/list')\n    }\n\n    handleAdminClick = (id) => {\n        this.props.dispatch({\n            type: 'GET_ADMIN_GROUP_INFO',\n            payload: id\n        })\n        this.props.history.push(`/admin/${id}`)\n    }\n    render() {\n        return (\n            <div>\n                <Typography component=\"div\">\n                    <Box textAlign=\"center\" fontSize=\"h3.fontSize\" className=\"formName\">Edit Profile Information\n                    </Box>\n                </Typography>\n                <Button onClick={this.backClick} variant=\"outlined\">Back</Button>\n                <Button onClick={() => this.handleAdminClick(this.props.user.active_group_id)} variant=\"outlined\">Admin</Button>\n                <EditProfileForm />\n                <Typography component=\"div\">\n                    <Box textAlign=\"center\" fontSize=\"h6.fontSize\" className=\"formText\">\n                        Join a group by entering the Group Number\n                    provided to you by the Group Admin here:\n                    </Box>\n                </Typography>\n                <br />\n                <Container className={this.props.classes.joinGroup}>\n                    <Input placeholder=\"group number\" />\n                    <br />\n                    <br />\n                    <Button variant=\"outlined\">Join</Button>\n                \n                <p>Current Active Group: \n                {this.props.profile[0] ? (this.props.profile[0].group_name) :\n                (<p>None</p>)}</p>\n                <p>Select group to view:</p>\n                {<GroupGenerator />}\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        reduxStore,\n        group: reduxStore.groupReducer,\n        user: reduxStore.user,\n        profile: reduxStore.profilePageReducer\n    }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(EditProfile));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { Input } from '@material-ui/core';\nimport swal from '@sweetalert/with-react';\nimport Button from '@material-ui/core/Button';\n\n//form to handle creation of a new group\n\nclass CreateNewGroupForm extends Component {\n    state = {\n        newGroup: {\n            newGroupName: '',\n            newGroupID: '',\n        }\n    }\n    //handles change for all form properties\n    handleChangeFor = (event, propertyName) => {\n        this.setState({\n            newGroup: {\n                ...this.state.newGroup,\n                [propertyName]: event.target.value,\n            }\n        })\n    }\n    //handles submission of form\n    handleFormSubmit = (event) => {\n        event.preventDefault();\n        console.log('form submitted');\n        this.setState({\n            newGroup: {\n                newGroupName: '',\n                newGroupID: '',\n            }\n        })\n        this.props.dispatch({\n            type: 'ADD_GROUP',\n            payload: {\n                newGroup: this.state.newGroup,\n                adminID: this.props.user.id\n            }\n        })\n        //sweet alert to let user know group has been submitted\n        swal(\n            <div>\n                <h1>Group submitted successfully!</h1>\n            </div>\n        )\n    }\n\n    render() {\n\n        return (\n            <div>\n                <div style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    margin: 20,\n                    padding: 20\n                }}>\n                    <form style={{ width: \"75%\" }} onSubmit={this.handleFormSubmit}>\n                        <InputLabel htmlFor=\"text\">Group Name</InputLabel>\n                        <Input\n                            value={this.state.newGroup.newGroupName}\n                            onChange={(event) => this.handleChangeFor(event, 'newGroupName')} />\n                        <InputLabel htmlFor=\"text\">Group ID Number</InputLabel>\n                        <Input\n                            value={this.state.newGroup.newGroupID}\n                            onChange={(event) => this.handleChangeFor(event, 'newGroupID')} />\n                        <Button variant=\"contained\" color=\"primary\" type=\"submit\" value=\"Add New Group\">Submit</Button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        user: reduxStore.user\n    }\n}\nexport default connect(mapStateToProps)(CreateNewGroupForm);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport CreateNewGroupForm from '../CreateNewGroupForm/CreateNewGroupForm';\n\nclass CreateNewGroup extends Component {\n    render() {\n        return (\n            <div>\n                <h1>Create New Group</h1>\n                <CreateNewGroupForm />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        reduxStore\n    }\n}\nexport default connect(mapStateToProps)(CreateNewGroup);","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\n\n//ADMIN OF GROUP VIEW\n\nclass AdminPage extends Component {\n\n    componentDidMount() {\n        // this.getAdminGroupInfo()\n    }\n\n    getAdminGroupInfo = () => {\n        this.props.dispatch({\n            type: 'GET_ADMIN_GROUP_INFO',\n            payload: this.props.user.active_group_id\n        })\n    }\n\n    render() {\n        \n        return (\n            <div>\n                <div>\n                    <h1>Admin</h1>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (reduxStore) => {\n    return {\n        user: reduxStore.user,\n    }\n}\nexport default connect(mapStateToProps)(AdminPage);","import React, { Component } from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\n\nimport { connect } from 'react-redux';\n\nimport Nav from '../Nav/Nav';\nimport Footer from '../Footer/Footer';\n\nimport ProtectedRoute from '../ProtectedRoute/ProtectedRoute'\n\nimport UserPage from '../UserPage/UserPage';\nimport InfoPage from '../InfoPage/InfoPage';\nimport RestaurantForm from '../RestaurantForm/RestaurantForm';\nimport RestaurantList from '../RestaurantList/RestaurantList';\nimport RestaurantDetails from '../RestaurantDetails/RestaurantDetails';\nimport EditProfile from '../EditProfile/EditProfile';\nimport CreateNewGroup from '../CreateNewGroup/CreateNewGroup';\nimport AdminPage from '../AdminPage/AdminPage';\nimport './App.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.dispatch({ type: 'FETCH_USER' })\n  }\n\n  render() {\n    return (\n\n      <Router>\n        <div>\n          <Nav />\n          <Switch>\n            {/* Visiting localhost:3000 will redirect to localhost:3000/home */}\n            <Redirect exact from=\"/\" to=\"/home\" />\n            {/* Visiting localhost:3000/about will show the about page.\n            This is a route anyone can see, no login necessary */}\n            {/* <Route\n              exact\n              path=\"/about\"\n              component={AboutPage}\n            /> */}\n            {/* For protected routes, the view could show one of several things on the same route.\n            Visiting localhost:3000/home will show the UserPage if the user is logged in.\n            If the user is not logged in, the ProtectedRoute will show the 'Login' or 'Register' page.\n            Even though it seems like they are different pages, the user is always on localhost:3000/home */}\n            <ProtectedRoute\n              exact\n              path=\"/home\"\n              component={UserPage}\n            />\n            {/* This works the same as the other protected route, except that if the user is logged in,\n            they will see the info page instead. */}\n            <ProtectedRoute\n              exact\n              path=\"/info\"\n              component={InfoPage}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/add\"\n              component={RestaurantForm}\n            />\n            <ProtectedRoute\n              exact\n              path=\"/list\"\n              component={RestaurantList}\n            />\n            <ProtectedRoute\n              path=\"/details/:id\"\n              component={RestaurantDetails}\n            />\n            <ProtectedRoute\n              path=\"/profile/:id\"\n              component={EditProfile}\n            />\n            <ProtectedRoute\n              path=\"/create_group\"\n              component={CreateNewGroup}\n            />\n            <ProtectedRoute\n              path=\"/admin/:id\"\n              component={AdminPage}\n            />\n            {/* If none of the other routes matched, we will show a 404. */}\n            <Route render={() => <h1>404</h1>} />\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default connect()(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from 'redux-logger';\n\nimport rootReducer from './redux/reducers'; // imports ./redux/reducers/index.js\nimport rootSaga from './redux/sagas'; // imports ./redux/sagas/index.js\n\nimport App from './components/App/App';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// this line creates an array of all of redux middleware you want to use\n// we don't want a whole ton of console logs in our production code\n// logger will only be added to your project if your in development mode\nconst middlewareList = process.env.NODE_ENV === 'development' ?\n  [sagaMiddleware, logger] :\n  [sagaMiddleware];\n\nconst store = createStore(\n  // tells the saga middleware to use the rootReducer\n  // rootSaga contains all of our other reducers\n  rootReducer,\n  // adds all middleware to our project including saga and logger\n  applyMiddleware(...middlewareList),\n);\n\n// tells the saga middleware to use the rootSaga\n// rootSaga contains all of our other sagas\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('react-root'),\n);\n"],"sourceRoot":""}